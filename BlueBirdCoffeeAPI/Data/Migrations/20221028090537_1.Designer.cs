// <auto-generated />
using System;
using Data.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221028090537_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BillNumber")
                        .HasColumnType("integer");

                    b.Property<string>("CasherId")
                        .HasColumnType("text");

                    b.Property<double?>("Coupon")
                        .HasColumnType("double precision");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTakeAway")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemMissingReason")
                        .HasColumnType("text");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CasherId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Data.Entities.BillOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId", "BillId");

                    b.HasIndex("BillId");

                    b.ToTable("BillOrders");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8242),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8242),
                            Description = "Cà phê truyền thống",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b2"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8244),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8245),
                            Description = "Cà phê ép máy",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b3"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8246),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8246),
                            Description = "Cà phê đặc biệt",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b4"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8248),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8248),
                            Description = "Nước ép",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b5"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8250),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8250),
                            Description = "Sinh tố",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b6"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8251),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8252),
                            Description = "Trà sữa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b7"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8253),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8253),
                            Description = "Trà nóng",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8255),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8255),
                            Description = "Trà trà",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b9"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8257),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8257),
                            Description = "Ăn vặt",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Data.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Limit")
                        .HasColumnType("integer");

                    b.Property<double?>("Maximum")
                        .HasColumnType("double precision");

                    b.Property<double?>("Minium")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Data.Entities.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb22e2ea-0305-4778-a129-f400e6a64447"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8167),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8170),
                            Description = "Tầng 1",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eb22e2ea-0305-4778-a129-f400e6a64445"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8179),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8179),
                            Description = "Tầng 2",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Data.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8269),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8269),
                            IsDeleted = false,
                            Name = "Cà phê đen phin",
                            Price = 12000.0
                        },
                        new
                        {
                            Id = new Guid("26d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8272),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8272),
                            IsDeleted = false,
                            Name = "Cà phê sữa phin",
                            Price = 14000.0
                        },
                        new
                        {
                            Id = new Guid("36d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8274),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8274),
                            IsDeleted = false,
                            Name = "Cà phê đen đá Sài Gòn",
                            Price = 18000.0
                        },
                        new
                        {
                            Id = new Guid("46d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8276),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8277),
                            IsDeleted = false,
                            Name = "Cà phê sữa đá Sài Gòn",
                            Price = 20000.0
                        },
                        new
                        {
                            Id = new Guid("56d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8279),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8279),
                            IsDeleted = false,
                            Name = "Bạc xỉu",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("66d3154f-b5e8-4b00-9262-a4215b43f6ee"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b1"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8281),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8281),
                            IsDeleted = false,
                            Name = "Ca cao nóng - đá",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("ff64e1d2-a0e7-40a9-9bb1-d01a19bea5b1"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b2"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8283),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8283),
                            IsDeleted = false,
                            Name = "Cà phê đen máy",
                            Price = 16000.0
                        },
                        new
                        {
                            Id = new Guid("ff64e1d2-a0e7-40a9-9bb1-d01a19bea5b2"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b2"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8285),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8285),
                            IsDeleted = false,
                            Name = "Cà phê sữa máy",
                            Price = 18000.0
                        },
                        new
                        {
                            Id = new Guid("1929dacf-d25a-4a8d-b647-c9a29d3d552b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b3"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8287),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8288),
                            IsDeleted = false,
                            Name = "Cà phê kem trứng muối",
                            Price = 29000.0
                        },
                        new
                        {
                            Id = new Guid("2929dacf-d25a-4a8d-b647-c9a29d3d552b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b3"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8290),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8290),
                            IsDeleted = false,
                            Name = "Cà phê cốt dừa",
                            Price = 29000.0
                        },
                        new
                        {
                            Id = new Guid("3929dacf-d25a-4a8d-b647-c9a29d3d552b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b3"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8292),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8293),
                            IsDeleted = false,
                            Name = "Cà phê trứng",
                            Price = 29000.0
                        },
                        new
                        {
                            Id = new Guid("4929dacf-d25a-4a8d-b647-c9a29d3d552b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b3"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8294),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8295),
                            IsDeleted = false,
                            Name = "Cappuchino",
                            Price = 29000.0
                        },
                        new
                        {
                            Id = new Guid("c3667f70-c2b7-4af9-8300-ad54c79e841a"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b4"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8297),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8297),
                            IsDeleted = false,
                            Name = "Nước ép dưa hấu",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("c3667f70-c2b7-4af9-8300-ad54c79e842a"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b4"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8299),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8299),
                            IsDeleted = false,
                            Name = "Nước ép cà rốt",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("c3667f70-c2b7-4af9-8300-ad54c79e843a"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b4"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8301),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8301),
                            IsDeleted = false,
                            Name = "Nước ép thơm",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("c3667f70-c2b7-4af9-8300-ad54c79e844a"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b4"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8303),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8303),
                            IsDeleted = false,
                            Name = "Nước ép cam",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("1649ec15-fcec-4368-83f9-5b16f43fee5b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b5"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8305),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8306),
                            IsDeleted = false,
                            Name = "Sinh tố bơ",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("2649ec15-fcec-4368-83f9-5b16f43fee5b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b5"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8307),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8308),
                            IsDeleted = false,
                            Name = "Sinh tố bơ sầu riêng",
                            Price = 35000.0
                        },
                        new
                        {
                            Id = new Guid("3649ec15-fcec-4368-83f9-5b16f43fee5b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b5"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8310),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8310),
                            IsDeleted = false,
                            Name = "Sinh tố xoài",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("4649ec15-fcec-4368-83f9-5b16f43fee5b"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b5"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8312),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8312),
                            IsDeleted = false,
                            Name = "Sinh tố dâu tây",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("d135806f-52da-434f-840b-ae253b0fbbff"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b6"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8314),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8314),
                            IsDeleted = false,
                            Name = "Trà sữa truyền thống",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("d235806f-52da-434f-840b-ae253b0fbbff"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b6"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8316),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8316),
                            IsDeleted = false,
                            Name = "Trà sữa kem trứng muối",
                            Price = 29000.0
                        },
                        new
                        {
                            Id = new Guid("d335806f-52da-434f-840b-ae253b0fbbff"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b6"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8318),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8318),
                            IsDeleted = false,
                            Name = "Trà sữa khoai môn",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("d18ca698-10a5-42e3-b044-3bdd2e5d81bd"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b7"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8320),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8320),
                            IsDeleted = false,
                            Name = "Trà olong cúc mật ong nóng",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("d28ca698-10a5-42e3-b044-3bdd2e5d81bd"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b7"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8322),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8322),
                            IsDeleted = false,
                            Name = "Trà hoa cúc nóng",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("d38ca698-10a5-42e3-b044-3bdd2e5d81bd"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b7"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8324),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8324),
                            IsDeleted = false,
                            Name = "Trà chanh nóng",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48321"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8326),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8326),
                            IsDeleted = false,
                            Name = "Trà chanh",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48322"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8328),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8329),
                            IsDeleted = false,
                            Name = "Trà chanh dây",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48323"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8330),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8331),
                            IsDeleted = false,
                            Name = "Trà lipton nóng - đá",
                            Price = 20000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48324"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8332),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8333),
                            IsDeleted = false,
                            Name = "Trà gừng nóng - đá",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48325"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8334),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8335),
                            IsDeleted = false,
                            Name = "Trà đào cam xả",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48326"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8336),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8337),
                            IsDeleted = false,
                            Name = "Trà vải",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48327"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8338),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8339),
                            IsDeleted = false,
                            Name = "Trà sen macchiato",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48328"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8341),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8341),
                            IsDeleted = false,
                            Name = "Trà đen macchiato",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("5020bd91-1caf-4868-9fe5-9a1360c48329"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b8"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8343),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8343),
                            IsDeleted = false,
                            Name = "Trà dâu",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("1afeafff-f9d3-4a88-8a03-950482af826f"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b9"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8345),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8345),
                            IsDeleted = false,
                            Name = "Bắp rang bơ",
                            Price = 15000.0
                        },
                        new
                        {
                            Id = new Guid("2afeafff-f9d3-4a88-8a03-950482af826f"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b9"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8351),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8351),
                            IsDeleted = false,
                            Name = "Bắp rang bơ caramel",
                            Price = 20000.0
                        },
                        new
                        {
                            Id = new Guid("3afeafff-f9d3-4a88-8a03-950482af826f"),
                            Available = true,
                            CategoryId = new Guid("4f16c29d-f0dd-4c41-8481-48f32d4cd5b9"),
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8353),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8353),
                            IsDeleted = false,
                            Name = "Bắp rang bơ phô mai",
                            Price = 20000.0
                        });
                });

            modelBuilder.Entity("Data.Entities.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCheckout")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserRejectedId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserRejectedId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FinalQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("MissingReason")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Data.Entities.SystemSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Key = "ORDER_RECEIVER",
                            Value = "[\"BARTENDER\"]"
                        });
                });

            modelBuilder.Entity("Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rotation")
                        .HasColumnType("integer");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f3ebd56-dbf5-453f-819d-2757a152d0a5"),
                            CurrentOrder = 0,
                            DateCreated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8193),
                            DateUpdated = new DateTime(2022, 10, 28, 16, 5, 37, 446, DateTimeKind.Utc).AddTicks(8194),
                            Description = "101",
                            FloorId = new Guid("eb22e2ea-0305-4778-a129-f400e6a64445"),
                            IsDeleted = false,
                            Position = "22,823660714285715-31,412337662337663",
                            Rotation = 0,
                            Shape = "Rectangle",
                            Size = "9,988839285714286-9,983766233766234"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9acc7a1a-ae85-4e5a-8cb7-0b47025418ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c5104c1-196e-455a-bf6f-b2ddb55a316f",
                            EmailConfirmed = false,
                            Fullname = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVatu9u6IGD4AfolpXDzxhKcuCy0o3bKiqLlg6fYkabzGPInIrlJLxkV4aUbOa1dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "256effde-b8cd-41f3-b6f8-529409ec9aa7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9acc7a1a-ae85-4e5a-8cb7-0b47025417ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ececd87-bd5c-4002-9544-0b9cfc93187e",
                            EmailConfirmed = false,
                            Fullname = "Bartender",
                            LockoutEnabled = false,
                            NormalizedUserName = "BARTENDER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVatu9u6IGD4AfolpXDzxhKcuCy0o3bKiqLlg6fYkabzGPInIrlJLxkV4aUbOa1dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40ad3377-8a34-4bd9-a992-d97b07bb3eab",
                            TwoFactorEnabled = false,
                            UserName = "bartender"
                        },
                        new
                        {
                            Id = "9acc7a1a-ae85-4e5a-8cb7-0b47025416ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1167fedd-1abe-4d04-a72f-f075561ac7a3",
                            EmailConfirmed = false,
                            Fullname = "Employee",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVatu9u6IGD4AfolpXDzxhKcuCy0o3bKiqLlg6fYkabzGPInIrlJLxkV4aUbOa1dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b8c2d59-7104-45d5-bf49-6b4393e01f28",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = "9acc7a1a-ae85-4e5a-8cb7-0b47025415ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecd3d03d-78e0-4b23-aa13-364dd9a6de04",
                            EmailConfirmed = false,
                            Fullname = "Cashier",
                            LockoutEnabled = false,
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVatu9u6IGD4AfolpXDzxhKcuCy0o3bKiqLlg6fYkabzGPInIrlJLxkV4aUbOa1dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba0a432-2e26-40be-961b-ddab7d0e1adf",
                            TwoFactorEnabled = false,
                            UserName = "cashier"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "BARTENDER",
                            ConcurrencyStamp = "BARTENDER",
                            Name = "BARTENDER",
                            NormalizedName = "BARTENDER"
                        },
                        new
                        {
                            Id = "CUSTOMER",
                            ConcurrencyStamp = "CUSTOMER",
                            Name = "CUSTOMER",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "EMPLOYEE",
                            ConcurrencyStamp = "EMPLOYEE",
                            Name = "EMPLOYEE",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "CASHIER",
                            ConcurrencyStamp = "CASHIER",
                            Name = "CASHIER",
                            NormalizedName = "CASHIER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9acc7a1a-ae85-4e5a-8cb7-0b47025418ac",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "9acc7a1a-ae85-4e5a-8cb7-0b47025417ac",
                            RoleId = "BARTENDER"
                        },
                        new
                        {
                            UserId = "9acc7a1a-ae85-4e5a-8cb7-0b47025416ac",
                            RoleId = "EMPLOYEE"
                        },
                        new
                        {
                            UserId = "9acc7a1a-ae85-4e5a-8cb7-0b47025415ac",
                            RoleId = "CASHIER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Bill", b =>
                {
                    b.HasOne("Data.Entities.User", "Casher")
                        .WithMany()
                        .HasForeignKey("CasherId");

                    b.HasOne("Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Casher");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Data.Entities.BillOrder", b =>
                {
                    b.HasOne("Data.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Item", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.ItemImage", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.HasOne("Data.Entities.User", "UserRejected")
                        .WithMany()
                        .HasForeignKey("UserRejectedId");

                    b.Navigation("Employee");

                    b.Navigation("Table");

                    b.Navigation("UserRejected");
                });

            modelBuilder.Entity("Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Table", b =>
                {
                    b.HasOne("Data.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
